package com.example.flightbooking.service;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.example.flightbooking.model.Passenger;
import com.example.flightbooking.repository.PassengerRepository;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/** an example test generated by AI*/

@ContextConfiguration(classes = {PassengerService.class})
@ExtendWith(SpringExtension.class)
class PassengerServiceTest {
    @MockBean
    private PassengerRepository passengerRepository;

    @Autowired
    private PassengerService passengerService;


    @Test
    void testSavePassenger() {
        Passenger passenger = new Passenger();
        passenger.setFoodChoice(1);
        passenger.setId(12345);
        passenger.setPassengerAge(18);
        passenger.setPassengerName("Rose");
        when(this.passengerRepository.save((Passenger) any())).thenReturn(passenger);

        Passenger passenger1 = new Passenger();
        passenger1.setFoodChoice(1);
        passenger1.setId(12345);
        passenger1.setPassengerAge(18);
        passenger1.setPassengerName("Rose");
        assertSame(passenger, this.passengerService.savePassenger(passenger1));
        verify(this.passengerRepository).save((Passenger) any());
    }

    @Test
    void testGetAllPassenger() {
        ArrayList<Passenger> passengerList = new ArrayList<>();
        when(this.passengerRepository.findAll()).thenReturn(passengerList);
        List<Passenger> actualAllPassenger = this.passengerService.getAllPassenger();
        assertSame(passengerList, actualAllPassenger);
        assertTrue(actualAllPassenger.isEmpty());
        verify(this.passengerRepository).findAll();
    }
}

